// This file is auto-generated by @hey-api/openapi-ts

import { type Options, deleteInvoiceByInvoiceId, getInvoiceByInvoiceId, putInvoiceByInvoiceId, getInvoiceList, postInvoice, deleteInvoiceLineByInvoiceIdByLineNumber, getInvoiceLineByInvoiceIdByLineNumber, putInvoiceLineByInvoiceIdByLineNumber, postInvoiceLineByInvoiceId } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { DeleteInvoiceByInvoiceIdData, GetInvoiceByInvoiceIdData, PutInvoiceByInvoiceIdData, GetInvoiceListData, PostInvoiceData, PostInvoiceResponse, DeleteInvoiceLineByInvoiceIdByLineNumberData, GetInvoiceLineByInvoiceIdByLineNumberData, PutInvoiceLineByInvoiceIdByLineNumberData, PostInvoiceLineByInvoiceIdData, PostInvoiceLineByInvoiceIdResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const deleteInvoiceByInvoiceIdMutation = (options?: Partial<Options<DeleteInvoiceByInvoiceIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteInvoiceByInvoiceIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteInvoiceByInvoiceId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getInvoiceByInvoiceIdQueryKey = (options: Options<GetInvoiceByInvoiceIdData>) => createQueryKey('getInvoiceByInvoiceId', options);

export const getInvoiceByInvoiceIdOptions = (options: Options<GetInvoiceByInvoiceIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInvoiceByInvoiceId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getInvoiceByInvoiceIdQueryKey(options)
    });
};

export const putInvoiceByInvoiceIdMutation = (options?: Partial<Options<PutInvoiceByInvoiceIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutInvoiceByInvoiceIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putInvoiceByInvoiceId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getInvoiceListQueryKey = (options?: Options<GetInvoiceListData>) => createQueryKey('getInvoiceList', options);

export const getInvoiceListOptions = (options?: Options<GetInvoiceListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInvoiceList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getInvoiceListQueryKey(options)
    });
};

export const postInvoiceQueryKey = (options?: Options<PostInvoiceData>) => createQueryKey('postInvoice', options);

export const postInvoiceOptions = (options?: Options<PostInvoiceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postInvoice({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postInvoiceQueryKey(options)
    });
};

export const postInvoiceMutation = (options?: Partial<Options<PostInvoiceData>>) => {
    const mutationOptions: UseMutationOptions<PostInvoiceResponse, DefaultError, Options<PostInvoiceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postInvoice({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteInvoiceLineByInvoiceIdByLineNumberMutation = (options?: Partial<Options<DeleteInvoiceLineByInvoiceIdByLineNumberData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteInvoiceLineByInvoiceIdByLineNumberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteInvoiceLineByInvoiceIdByLineNumber({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getInvoiceLineByInvoiceIdByLineNumberQueryKey = (options: Options<GetInvoiceLineByInvoiceIdByLineNumberData>) => createQueryKey('getInvoiceLineByInvoiceIdByLineNumber', options);

export const getInvoiceLineByInvoiceIdByLineNumberOptions = (options: Options<GetInvoiceLineByInvoiceIdByLineNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getInvoiceLineByInvoiceIdByLineNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getInvoiceLineByInvoiceIdByLineNumberQueryKey(options)
    });
};

export const putInvoiceLineByInvoiceIdByLineNumberMutation = (options?: Partial<Options<PutInvoiceLineByInvoiceIdByLineNumberData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PutInvoiceLineByInvoiceIdByLineNumberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putInvoiceLineByInvoiceIdByLineNumber({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postInvoiceLineByInvoiceIdQueryKey = (options: Options<PostInvoiceLineByInvoiceIdData>) => createQueryKey('postInvoiceLineByInvoiceId', options);

export const postInvoiceLineByInvoiceIdOptions = (options: Options<PostInvoiceLineByInvoiceIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postInvoiceLineByInvoiceId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postInvoiceLineByInvoiceIdQueryKey(options)
    });
};

export const postInvoiceLineByInvoiceIdMutation = (options?: Partial<Options<PostInvoiceLineByInvoiceIdData>>) => {
    const mutationOptions: UseMutationOptions<PostInvoiceLineByInvoiceIdResponse, DefaultError, Options<PostInvoiceLineByInvoiceIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postInvoiceLineByInvoiceId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};